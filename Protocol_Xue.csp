#import "PAT.Lib.ClassLibrary2";
#import "PAT.Lib.HashTable"; 

#define S_U_Legitimacy_For_CS cs_check_K==true&&cs_check_Pij==true&&cs_check_PID==true&&cs_check_PSID == true;
#define CS_U_Legitimacy_For_S cs_check_Q==true;
#define S_CS_Legitimacy_For_U cs_check_V==true;
#define SK_Consistency  (CS_SK==Server_SK)&&(Server_SK==User_SK);
#define SuccessRelayAttack (successreplayattack==true);
#define SuccessSessionKeyAttack (successsessionkeyattack==true);
#define SuccessDoSAttack (successdosattack==true);
#define SuccessServerSpoofingAttack (successserverspoofingattack==true);
#define TimeOut timeout==true;

//#define Test (tt1==true);

#define Un 6;
#define Sn 6;
enum{Master_Secret_Key,Secret_Number,Session_Key,x_value,y_value,b_value,A_value,B_value,
     C_value,D_value,E_value,F_value,G_value,K_value,M_value,P_value,Q_value,R_value,V_value,T_value,ID_value,CID_value,SID_value,SK_value,
     Hash_value_1,Hash_value_2,Hash_value_3,N1_value,N2_value,N3_value,XOR_N1_N3_value,XOR_N2_N3_value,Hash_A_B_value,
     PID_value,PSID_value,BS_value,d_value,TS_value,Pij_value,J_value,L_value,TS_c_value,PW_value};
var x = Master_Secret_Key;
var y = Secret_Number;
var b;
var d;
var SK;

var timeout = false;
var cs_check_K = false;
var cs_check_Pij = false;
var cs_check_PID = false;
var cs_check_PSID = false;
var cs_check_Q = false;
var cs_check_V = false;
var check_SK = false;
var successreplayattack=false;
var successsessionkeyattack=false;
var successdosattack=false;
var successserverspoofingattack=false;
var<HashTable> ht_U;
var<HashTable> ht_S;
var<HashTable> ht_C;
var<HashTable> ht_I;
var P[Un][Sn];
var ID[Un];
var A[Un];
var B[Un];
var C[Un];
var D[Un];
var E[Un];
var F[Un];
var G[Un];
var K[Un];
var M[Un];
var Q[Un];
var R[Un];
var V[Un];
var T[Un];
var J[Un];
var L[Un];
var p[Un];
var SID[Sn];
var CID[Un];
var PID[Un];
var PSID[Sn];
var BS[Sn];
var PW[Un];
var UserID = 0;
var UserID_I = 2;
var ServerID = 1;
var N[3];

var TS_fake=1002222;
var TS_old=0;
var TS_c_fake=22;
var delaym = 2;
var delays = 0;

var F_fake=1100;
var P_fake=1100;
var CID_fake=1100;
var G_fake=1100;
var PID_fake=1003;
var PSID_fake=998;

var CS_SK = -1;
var Server_SK = -2;
var User_SK = -3;

var get_N1=false;
var get_N2=false;
var get_XOR_N1_N3 = false;
var get_XOR_N2_N3 = false;

var tt1=-1;
var tt2=-1;
var tt3=-1;

channel ComSC 0;
channel ComUC 0;
channel ComUS 0;
channel FakeUI 0;
channel FakeSI 0;
channel FakeIS 0;
channel FakeIC 0;

Initial(i,j)  = InitialID{ID[i]=34;SID[j]=23;PW[i]=53;ht_U.Add(ID_value,ID[i]);ht_U.Add(PW_value,PW[i]);ht_S.Add(SID_value,SID[j]);} 
                -> Select_b{b=call(RAND,20,0,4);ht_U.Add(b_value,b);} -> Skip;

User_X_Reg(i) = Compute_A{var t=call(ComputeA_1,ht_U.GetValue(b_value),ht_U.GetValue(PW_value));ht_U.Add(A_value,t);} 
             -> ComUC!ht_U.GetValue(ID_value).ht_U.GetValue(b_value).ht_U.GetValue(A_value) -> ComUC?bi{ht_U.Add(B_value,bi);} 
             -> Compute_C{var t=call(ComputeC_1,ht_U.GetValue(ID_value),ht_U.GetValue(A_value));ht_U.Add(C_value,t);} 
             -> Compute_PID{var t=call(ComputePID_1,ht_U.GetValue(ID_value),b);ht_U.Add(PID_value,t);} 
             -> Compute_D{var t=call(ComputeD_1,ht_U.GetValue(B_value),ht_U.GetValue(PID_value),ht_U.GetValue(A_value));ht_U.Add(D_value,t);} -> Skip;
             
CS_X_Reg(i,j) =  Select{x=Master_Secret_Key;y=Secret_Number;ht_C.Add(x_value,x);ht_C.Add(y_value,y);} 
                -> ComSC?a1.a2{ht_C.Add(d_value,a2);}
                -> ComputePSID{PSID[j]=call(ComputePSID_1,SID[j],d);}
                -> ComputeBS{var t=call(ComputeBS_1,PSID[j],y);ht_C.Add(BS_value,t);} 
                -> ComSC!ht_C.GetValue(BS_value)
                -> ComUC?v1.v2.v3{ht_C.Add(ID_value,v1);ht_C.Add(b_value,v2);ht_C.Add(A_value,v3);} 
                -> ComputePID{PID[i]=call(ComputePID_1,ID[i],b);ht_C.Add(PID_value,PID[i]);}
                -> ComputeB{B[i]=call(ComputeB_1,PID[i],x);ht_C.Add(B_value,B[i]);}
                -> ComUC!B[i]
                -> Skip;                  

Server_X_Reg(j) = Select_d{d=call(RAND,20,0,5);ht_S.Add(d_value,d);} 
                -> ComputePSID{PSID[j]=call(ComputePSID_1,SID[j],d);ht_S.Add(PSID_value,PSID[j]);} -> ComSC!SID[j].d -> ComSC?b1{ht_S.Add(BS_value,b1);} -> Skip;
                          
User_X_Auth_I(i,j,InturderCond) =  GenerateN{var t=call(RAND,20,0,5);ht_U.Add(N1_value,t);}
              -> GenerateTS{ht_U.Add(TS_value,call(Timestamp));ht_U.Add(TS_c_value,call(RAND,20,0,22));}
             -> ComputeB{var t=call(ComputeB_2,ht_U.GetValue(D_value),ht_U.GetValue(C_value));ht_U.Add(B_value,t);}
             -> ComputeF{F[i]=call(ComputeF_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value));ht_U.Add(F_value,F[i]);}
             -> ComputePij{P[i][j]=call(ComputePij_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),SID[j],ht_U.GetValue(PID_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(Pij_value,P[i][j]);}
             -> ComputeCID{CID[i]=call(ComputeCID_1,ID[i],ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(CID_value,CID[i]);}
             -> ComputeG{G[i]=call(ComputeG_1,b,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(G_value,G[i]);}
             -> if (InturderCond) {User_X_Auth_Sub1()} else {User_X_Auth_Sub2()};
 
User_X_Auth_Sub1() = FakeUI!ht_U.GetValue(F_value).ht_U.GetValue(Pij_value).ht_U.GetValue(CID_value).ht_U.GetValue(G_value).ht_U.GetValue(PID_value).ht_U.GetValue(TS_value).ht_U.GetValue(TS_c_value)
              -> (User_X_Auth_Sub1_1()[*]  Skip); 
                
User_X_Auth_Sub1_1() = FakeUI?a1.a2{ht_U.Add(R_value,a1);ht_U.Add(V_value,a2);ht_I.Add(R_value,a1);ht_I.Add(V_value,a2);} -> User_X_Auth_Sub3();

User_X_Auth_Sub3() = ComputeXOR{var t=call(Compute_XOR_N2_N3,ht_U.GetValue(R_value),ht_U.GetValue(ID_value),ht_U.GetValue(N1_value),ht_U.GetValue(B_value));
                          ht_U.Add(XOR_N2_N3_value,t);}
             -> ComputeV{var t=call(ComputeV_1,ht_U.GetValue(XOR_N2_N3_value));if(t==ht_U.GetValue(V_value)){cs_check_V=true;}}
             -> ComputeSK{var t=call(ComputeSK_1,ht_U.GetValue(XOR_N2_N3_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                           ht_U.Add(SK_value,t);User_SK=t;} -> Skip;
                           
User_X_Auth_Sub2() = ComUS!ht_U.GetValue(F_value).ht_U.GetValue(Pij_value).ht_U.GetValue(CID_value).ht_U.GetValue(G_value).ht_U.GetValue(PID_value).ht_U.GetValue(TS_value).ht_U.GetValue(TS_c_value)
             -> (User_Auth_Sub2_1()[*]  Skip);


User_Auth_Sub2_1() = ComUS?a1.a2{ht_U.Add(R_value,a1);ht_U.Add(V_value,a2);} -> User_X_Auth_Sub3();



CS_X_Auth_I(i,j,InturderCond) = CS_X_Auth_I_Sub(i,j,InturderCond)[*]  Skip;

CS_X_Auth_I_Sub(i,j,InturderCond) = if (InturderCond) {CS_X_Auth_Sub1()} else {CS_X_Auth_Sub2()};
              CheckDelay{var t=call(EndSession, ht_C.GetValue(TS_value), call(Timestamp), delaym, delays);if(t==true){timeout=true;}}
              -> ComputeBS{var t=call(ComputeBS_1,ht_C.GetValue(PSID_value),y);ht_C.Add(BS_value,t);}
              -> ComputeN{var t=call(ComputeN_1,ht_C.GetValue(J_value),ht_C.GetValue(BS_value));ht_C.Add(N2_value,t);}
              -> ComputeK{var t=call(ComputeK_1,ht_C.GetValue(N2_value),ht_C.GetValue(BS_value),ht_C.GetValue(Pij_value),ht_C.GetValue(TS_c_value));
                          if(t==K[i]){cs_check_K=true;}}
              -> ComputeB{var t=call(ComputeB_1,PID[i],x);ht_C.Add(B_value,t);}
              -> ComputeN{var t=call(ComputeN_1,ht_C.GetValue(F_value),ht_C.GetValue(B_value));ht_C.Add(N1_value,t);}
              -> ComputeID{var t=call(ComputeID_1,ht_C.GetValue(CID_value),ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                           ht_C.Add(ID_value,t);}
              -> ComputeSID{var t=call(ComputeSID_1,ht_C.GetValue(L_value),ht_C.GetValue(BS_value),ht_C.GetValue(N2_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(SID_value,t);}
              -> ComputePij{var t=call(ComputePij_1,ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(SID_value),ht_C.GetValue(PID_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(Pij_value,t);if(t==P[i][j]){cs_check_Pij=true;}}
              -> Compute_b{var t=call(Compute_b_1,ht_C.GetValue(G_value),ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(b_value,t);}  
              -> Compute_d{var t=call(Compute_d_1,ht_C.GetValue(M_value),ht_C.GetValue(BS_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(d_value,t);} 
              -> ComputePID{var t=call(ComputePID_1,ID[i],b);if(t==ht_C.GetValue(PID_value)){cs_check_PID=true;}}     
              -> ComputePSID{var t=call(ComputePSID_1,SID[j],d);if(t==ht_C.GetValue(PSID_value)){cs_check_PSID=true;}}
              -> if(cs_check_PID==true&&cs_check_PSID==true) {CS_X_Auth_Sub5(i,InturderCond)}else{Skip};
              
CS_X_Auth_Sub5(i,InturderCond) = GenerateN{var t=call(RAND,20,0,6);ht_C.Add(N3_value,t);} 
              -> ComputeP{p[i]=call(ComputeP_1,ht_C.GetValue(N1_value),ht_C.GetValue(N3_value),ht_C.GetValue(SID_value),ht_C.GetValue(N2_value),ht_C.GetValue(BS_value));
                          ht_C.Add(P_value,p[i]);}
              -> ComputeQ1{Q[i]=call(ComputeQ_1,ht_C.GetValue(N1_value),ht_C.GetValue(N3_value));
                          ht_C.Add(Q_value,Q[i]);} 
              -> ComputeR{R[i]=call(ComputeR_1,ht_C.GetValue(N2_value),ht_C.GetValue(N3_value),ht_C.GetValue(ID_value),ht_C.GetValue(N1_value),ht_C.GetValue(B_value));
                          ht_C.Add(R_value,R[i]);} 
              -> ComputeV{V[i]=call(ComputeV_1,ht_C.GetValue(N2_value),ht_C.GetValue(N3_value));
                          ht_C.Add(V_value,V[i]);} -> 
              if (InturderCond) {CS_X_Auth_Sub3()} else {CS_X_Auth_Sub4()};
              ComputeSK{var t=call(ComputeSK_3,ht_C.GetValue(N1_value),ht_C.GetValue(N2_value),ht_C.GetValue(N3_value),ht_C.GetValue(TS_c_value));
                           ht_C.Add(SK_value,t);CS_SK=t;}
              -> Skip;

CS_X_Auth_Sub1() = FakeIC?v1.v2.v3.v4.v5.v6.v7.v8.v9.v10.v11.v12
              {ht_C.Add(F_value,v1);ht_C.Add(Pij_value,v2);ht_C.Add(CID_value,v3);ht_C.Add(G_value,v4);
              ht_C.Add(PID_value,v5);ht_C.Add(TS_value,v6);ht_C.Add(J_value,v7);ht_C.Add(K_value,v8);
              ht_C.Add(L_value,v9);ht_C.Add(M_value,v10);ht_C.Add(PSID_value,v11);tt3=v11;ht_C.Add(TS_c_value,v12);
              ht_I.Add(F_value,v1);ht_I.Add(Pij_value,v2);ht_I.Add(CID_value,v3);ht_I.Add(G_value,v4);
              ht_I.Add(PID_value,v5);ht_I.Add(TS_value,v6);ht_I.Add(J_value,v7);ht_I.Add(K_value,v8);
              ht_I.Add(L_value,v9);ht_I.Add(M_value,v10);ht_I.Add(PSID_value,v11);ht_I.Add(TS_c_value,v12);} -> Skip;
CS_X_Auth_Sub2() = ComSC?v1.v2.v3.v4.v5.v6.v7.v8.v9.v10.v11.v12
              {ht_C.Add(F_value,v1);ht_C.Add(Pij_value,v2);ht_C.Add(CID_value,v3);ht_C.Add(G_value,v4);
              ht_C.Add(PID_value,v5);ht_C.Add(TS_value,v6);ht_C.Add(J_value,v7);ht_C.Add(K_value,v8);
              ht_C.Add(L_value,v9);ht_C.Add(M_value,v10);ht_C.Add(PSID_value,v11);ht_C.Add(TS_c_value,v12);} -> Skip;
CS_X_Auth_Sub3() = FakeIC!ht_C.GetValue(P_value).ht_C.GetValue(Q_value).ht_C.GetValue(R_value).ht_C.GetValue(V_value) -> Skip;
CS_X_Auth_Sub4() = ComSC!ht_C.GetValue(P_value).ht_C.GetValue(Q_value).ht_C.GetValue(R_value).ht_C.GetValue(V_value) -> Skip;

Server_X_Auth_I(i,InturderCond1,InturderCond2) = 
               GenerateN{var t=call(RAND,20,0,7);ht_S.Add(N2_value,t);} 
              -> if (InturderCond1) {Server_Auth_Sub1()} else {Server_Auth_Sub2()};                       
              CheckDelay{var t=call(EndSession, ht_S.GetValue(TS_value), call(Timestamp), delaym, delays);if(t==true){timeout=true;}}
              -> if(timeout==false){Server_X_Auth_I_Sub(i,InturderCond1,InturderCond2)} else{Skip};
              
Server_X_Auth_I_Sub(i,InturderCond1,InturderCond2) = ComputeJ{J[i]=call(ComputeJ_1,ht_S.GetValue(BS_value),ht_S.GetValue(N2_value));ht_S.Add(J_value,J[i]);}   
              -> ComputeK{K[i]=call(ComputeK_1,ht_S.GetValue(N2_value),ht_S.GetValue(BS_value),ht_S.GetValue(Pij_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(K_value,K[i]);}
              -> ComputeL{L[i]=call(ComputeL_1,ht_S.GetValue(SID_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(L_value,L[i]);}
              -> ComputeM{M[i]=call(ComputeM_1,ht_S.GetValue(d_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(M_value,M[i]);}
              -> if (InturderCond2) {Server_X_Auth_Sub3(InturderCond1)} else {Server_X_Auth_Sub4(InturderCond1)};   


Server_Auth_Sub1() = FakeIS?v1.v2.v3.v4.v5.v6.v7{ht_S.Add(F_value,v1);ht_S.Add(Pij_value,v2);ht_S.Add(CID_value,v3);
                                      ht_S.Add(G_value,v4);ht_S.Add(PID_value,v5);ht_S.Add(TS_value,v6);ht_S.Add(TS_c_value,v7);
                                      ht_I.Add(F_value,v1);ht_I.Add(Pij_value,v2);ht_I.Add(CID_value,v3);
                                      ht_I.Add(G_value,v4);ht_I.Add(PID_value,v5);ht_I.Add(TS_value,v6);ht_I.Add(TS_c_value,v7);} -> Skip;
Server_Auth_Sub2() = ComUS?v1.v2.v3.v4.v5.v6.v7{ht_S.Add(F_value,v1);ht_S.Add(Pij_value,v2);ht_S.Add(CID_value,v3);
                                      ht_S.Add(G_value,v4);ht_S.Add(PID_value,v5);ht_S.Add(TS_value,v6);ht_S.Add(TS_c_value,v7);} -> Skip;
                                  
Server_X_Auth_Sub3(InturderCond1) = FakeSI!ht_S.GetValue(F_value).ht_S.GetValue(Pij_value).ht_S.GetValue(CID_value).
                        ht_S.GetValue(G_value).ht_S.GetValue(PID_value).ht_S.GetValue(TS_value).ht_S.GetValue(J_value).
                        ht_S.GetValue(K_value).ht_S.GetValue(L_value).ht_S.GetValue(M_value).ht_S.GetValue(PSID_value).ht_S.GetValue(TS_c_value)
               -> (Server_X_Auth_Sub3_1(InturderCond1)[*]Skip);

Server_X_Auth_Sub3_1(InturderCond1) =  FakeSI?a1.a2.a3.a4{ht_S.Add(P_value,a1);ht_S.Add(Q_value,a2);ht_S.Add(R_value,a3);ht_S.Add(V_value,a4);
                                    ht_I.Add(P_value,a1);ht_I.Add(Q_value,a2);ht_I.Add(R_value,a3);ht_I.Add(V_value,a4);}
              -> ComputeXOR{var t=call(Compute_XOR_N1_N3,ht_S.GetValue(P_value),ht_S.GetValue(SID_value),ht_S.GetValue(N2_value),ht_S.GetValue(BS_value));
                           ht_S.Add(XOR_N1_N3_value,t);}
              -> ComputeQ2{var t=call(ComputeQ_1,ht_S.GetValue(XOR_N1_N3_value));if(t==ht_S.GetValue(Q_value)){cs_check_Q=true;}}
              -> if (InturderCond1) {Server_Auth_Sub5()} else {Server_Auth_Sub6()};   
              ComputeSK{var t=call(ComputeSK_2,ht_S.GetValue(XOR_N1_N3_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                           ht_S.Add(SK_value,t);Server_SK=t;}
              -> Skip;                                     
                                    
                                    
Server_X_Auth_Sub4(InturderCond1) = ComSC!ht_S.GetValue(F_value).ht_S.GetValue(Pij_value).ht_S.GetValue(CID_value).
                        ht_S.GetValue(G_value).ht_S.GetValue(PID_value).ht_S.GetValue(TS_value).ht_S.GetValue(J_value).
                        ht_S.GetValue(K_value).ht_S.GetValue(L_value).ht_S.GetValue(M_value).ht_S.GetValue(PSID_value).ht_S.GetValue(TS_c_value)
              -> (Server_X_Auth_Sub4_1(InturderCond1)[*]Skip); 
              
 Server_X_Auth_Sub4_1(InturderCond1) =  ComSC?a1.a2.a3.a4{ht_S.Add(P_value,a1);ht_S.Add(Q_value,a2);ht_S.Add(R_value,a3);ht_S.Add(V_value,a4);}
              -> ComputeXOR{var t=call(Compute_XOR_N1_N3,ht_S.GetValue(P_value),ht_S.GetValue(SID_value),ht_S.GetValue(N2_value),ht_S.GetValue(BS_value));
                           ht_S.Add(XOR_N1_N3_value,t);}
              -> ComputeQ2{var t=call(ComputeQ_1,ht_S.GetValue(XOR_N1_N3_value));if(t==ht_S.GetValue(Q_value)){cs_check_Q=true;}}
              -> if (InturderCond1) {Server_Auth_Sub5()} else {Server_Auth_Sub6()};   
              ComputeSK{var t=call(ComputeSK_2,ht_S.GetValue(XOR_N1_N3_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                           ht_S.Add(SK_value,t);Server_SK=t;}
              -> Skip;                                                                         
              
Server_Auth_Sub5() = FakeIS!ht_S.GetValue(R_value).ht_S.GetValue(V_value) -> Skip;
Server_Auth_Sub6() = ComUS!ht_S.GetValue(R_value).ht_S.GetValue(V_value) -> Skip;            


Intruder_X_SessionKeyAttack() = FakeUI?a1.a2.a3.a4.a5.a6.a7 -> FakeIS!a1.a2.a3.a4.a5.a6.a7 -> FakeSI?b1.b2.b3.b4.b5.b6.b7.b8.b9.b10.b11.b12 -> FakeIC!b1.b2.b3.b4.b5.b6.b7.b8.b9.b10.b11.b12 
                            -> FakeIC?c1.c2.c3.c4 -> FakeSI!c1.c2.c3.c4 -> FakeIS?d1.d2 -> FakeUI!d1.d2 
                            -> ExtractFromJ{if(ht_I.ContainsKey(BS_value)&&ht_I.ContainsKey(J_value)) {get_N2=true;}} 
                            -> ExtractFromB{if(ht_I.ContainsKey(B_value)&&ht_I.ContainsKey(F_value)) {get_N1=true;}} 
                            -> ExtractFromP{if(ht_I.ContainsKey(P_value)&&ht_I.ContainsKey(SID_value)&&ht_I.ContainsKey(N2_value)&&ht_I.ContainsKey(BS_value)) {get_XOR_N1_N3=true;}} 
                            -> ExtractFromV{if(ht_I.ContainsKey(R_value)&&ht_I.ContainsKey(ID_value)&&ht_I.ContainsKey(N1_value)&&ht_I.ContainsKey(B_value)) {get_XOR_N2_N3=true;}} 
                            -> ExtractSK{if(((get_N2==true&&get_XOR_N1_N3==true)||(get_N1==true&&get_XOR_N2_N3==true))&&ht_I.ContainsKey(TS_value)) {successsessionkeyattack=true;}} -> Skip; 
                            
//假设在U和S之间加入入侵者，修改TS，那么到CS的delay验证就会出错
Intruder_X_ReplayAttack() = FakeUI?t1.t2.t3.t4.t5.t6.t7 -> ModifyTimestamp{TS_old = call(ModifyTimestamp,t6,delaym+1);} -> FakeIS!t1.t2.t3.t3.t5.TS_old.t7 -> (Intruder_X_ReplayAttack_Sub()[*]Skip);
Intruder_X_ReplayAttack_Sub() = FakeIS?v1.v2 -> FakeUI!v1.v2 -> CheckReplayAttack{successreplayattack=true;}-> Skip;        

          

Intruder_X_DoSAttack() = FakeUI?t1.t2.t3.t4.t5.t6.t7 -> FakeIS!F_fake.P_fake.CID_fake.G_fake.PID_fake.TS_fake.TS_c_fake -> (Intruder_X_DoSAttack_Sub()[*]Skip);
Intruder_X_DoSAttack_Sub() = FakeIS?v1.v2 -> FakeUI!v1.v2 -> CheckDoSAttack{successdosattack=true;}-> Skip;

 //假冒Server
Intruder_X_ServerSpoofingAttack() = FakeUI?a1.a2.a3.a4.a5.a6.a7 -> FakeIS!a1.a2.a3.a4.a5.a6.a7 
                                -> FakeSI?b1.b2.b3.b4.b5.b6.b7.b8.b9.b10.b11.b12 -> FakeIC!b1.b2.b3.b4.b5.b6.b7.b8.b9.b10.PSID_fake.b12 
                                -> (Intruder_X_ServerSpoofingAttack_Sub()[*]Skip);
Intruder_X_ServerSpoofingAttack_Sub() = FakeIC?v1.v2.v3.v4 -> FakeSI!v1.v2.v3.v4 -> CheckServerSpoofingAttack{successserverspoofingattack=true;}-> Skip;

Protocol_X_Reg(i,j) = Initial(i,j);(User_X_Reg(i)||Server_X_Reg(i)||CS_X_Reg(i,j));

Protocol_X_Auth(i,j,Cond1,Cond2) = (User_X_Auth_I(i,j,Cond1)||Server_X_Auth_I(i,Cond1,Cond2)||CS_X_Auth_I(i,j,Cond2));

Protocol_X() = Protocol_X_Reg(UserID,ServerID);Protocol_X_Auth(UserID,ServerID,false,false);

Protocol_X_ServerSpoofingAttack() = Protocol_X_Reg(UserID,ServerID);(Protocol_X_Auth(UserID,ServerID,true,true)||Intruder_X_ServerSpoofingAttack());
Protocol_X_ReplayAttack() = Protocol_X_Reg(UserID,ServerID);(Protocol_X_Auth(UserID,ServerID,true,false)||Intruder_X_ReplayAttack());
Protocol_X_SessionKeyAttack() = Protocol_X_Reg(UserID,ServerID);(Protocol_X_Auth(UserID,ServerID,true,true)||Intruder_X_SessionKeyAttack());
Protocol_X_DoSAttack() = Protocol_X_Reg(UserID,ServerID);(Protocol_X_Auth(UserID,ServerID,true,false)||Intruder_X_DoSAttack());


#assert Protocol_X() deadlockfree;
#assert Protocol_X_ServerSpoofingAttack() deadlockfree;
#assert Protocol_X_ReplayAttack() deadlockfree;
#assert Protocol_X_SessionKeyAttack() deadlockfree;
#assert Protocol_X_DoSAttack() deadlockfree;

#assert Protocol_X() |= <> S_U_Legitimacy_For_CS;
#assert Protocol_X_ServerSpoofingAttack() |= <> S_U_Legitimacy_For_CS;
#assert Protocol_X_ReplayAttack() |= <> S_U_Legitimacy_For_CS;
#assert Protocol_X_SessionKeyAttack() |= <> S_U_Legitimacy_For_CS;
#assert Protocol_X_DoSAttack() |= <> S_U_Legitimacy_For_CS;

#assert Protocol_X() |= <> CS_U_Legitimacy_For_S;
#assert Protocol_X_ServerSpoofingAttack() |= <> CS_U_Legitimacy_For_S;
#assert Protocol_X_ReplayAttack() |= <> CS_U_Legitimacy_For_S;
#assert Protocol_X_SessionKeyAttack() |= <> CS_U_Legitimacy_For_S;
#assert Protocol_X_DoSAttack() |= <> CS_U_Legitimacy_For_S;

#assert Protocol_X() |= <> S_CS_Legitimacy_For_U;
#assert Protocol_X_ServerSpoofingAttack() |= <> S_CS_Legitimacy_For_U;
#assert Protocol_X_ReplayAttack() |= <> S_CS_Legitimacy_For_U;
#assert Protocol_X_SessionKeyAttack() |= <> S_CS_Legitimacy_For_U;
#assert Protocol_X_DoSAttack() |= <> S_CS_Legitimacy_For_U;

#assert Protocol_X() |= <> SK_Consistency;
#assert Protocol_X_ServerSpoofingAttack() |= <> SK_Consistency;
#assert Protocol_X_ReplayAttack() |= <> SK_Consistency;
#assert Protocol_X_SessionKeyAttack() |= <> SK_Consistency;
#assert Protocol_X_DoSAttack() |= <> SK_Consistency;
#assert Protocol_X() |=[]!TimeOut;
#assert Protocol_X_ServerSpoofingAttack() |=[]!TimeOut;
#assert Protocol_X_ReplayAttack() |=[]!TimeOut;
#assert Protocol_X_SessionKeyAttack() |=[]!TimeOut;
#assert Protocol_X_DoSAttack() |=[]!TimeOut;


#assert Protocol_X_SessionKeyAttack() reaches SuccessSessionKeyAttack;
#assert Protocol_X_SessionKeyAttack() reaches SuccessRelayAttack;
#assert Protocol_X_DoSAttack() reaches SuccessDoSAttack; 
#assert Protocol_X_ServerSpoofingAttack() reaches SuccessServerSpoofingAttack;