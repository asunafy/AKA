#import "PAT.Lib.ClassLibrary2";
#import "PAT.Lib.HashTable"; 

#define S_U_Legitimacy_X_For_CS cs_check_K==true&&cs_check_Pij==true&&cs_check_PID==true&&cs_check_PSID == true;
#define CS_U_Legitimacy_X_For_S cs_check_Q==true;
#define S_CS_Legitimacy_X_For_U cs_check_V==true;
#define SK_Consistency  (CS_SK==Server_SK)&&(Server_SK==User_SK);
#define SuccessRelayAttack successrelayattack==true;
#define TimeOut timeout==true;

#define Un 6;
#define Sn 6;
enum{Master_Secret_Key,Secret_Number,Session_Key,x_value,y_value,b_value,A_value,B_value,
     C_value,D_value,E_value,F_value,G_value,K_value,M_value,P_value,Q_value,R_value,V_value,T_value,ID_value,CID_value,SID_value,SK_value,
     Hash_value_1,Hash_value_2,Hash_value_3,N1_value,N2_value,N3_value,XOR_N1_N3_value,XOR_N2_N3_value,Hash_A_B_value,
     PID_value,PSID_value,BS_value,d_value,TS_value,Pij_value,J_value,L_value,TS_c_value};
var x = Master_Secret_Key;
var y = Secret_Number;
var b;
var d;
var SK;

var timeout = false;
var cs_check_K = false;
var cs_check_Pij = false;
var cs_check_PID = false;
var cs_check_PSID = false;
var cs_check_Q = false;
var cs_check_V = false;
var check_SK = false;
var successrelayattack=false;

var<HashTable> ht_U;
var<HashTable> ht_S;
var<HashTable> ht_C;
var P[Un][Sn];
var ID[Un];
var A[Un];
var B[Un];
var C[Un];
var D[Un];
var E[Un];
var F[Un];
var G[Un];
var K[Un];
var M[Un];
var Q[Un];
var R[Un];
var V[Un];
var T[Un];
var J[Un];
var L[Un];
var p[Un];
var SID[Sn];
var CID[Un];
var PID[Un];
var PSID[Sn];
var BS[Sn];
var PW[Un];
var UserID = 0;
var UserID_I = 2;
var ServerID = 1;
var N[3];

var TS_fake=1002222;
var TS_c_fake=22;
var delaym = 2;
var delays = 0;

var CS_SK = -1;
var Server_SK = -2;
var User_SK = -3;

channel ComSC 0;
channel ComUC 0;
channel ComUS 0;
channel FakeIU 0;
channel FakeIS 0;

Initial(i,j)  = InitialID{ID[i]=34;SID[j]=23;PW[i]=53;ht_S.Add(SID_value,SID[j]);} -> Skip;

User_Reg(i) = Select_b{b=call(RAND,20,0,4);} 
            -> Compute_A{A[i]=call(ComputeA_1,b,PW[i]);ht_U.Add(A_value,A[i]);} -> ComUC!ID[i].b.A[i] 
             -> ComUC?a1{ht_U.Add(B_value,a1);} -> Compute_C{C[i]=call(ComputeC_1,ID[i],A[i]);ht_U.Add(C_value,C[i]);} -> ComputePID{PID[i]=call(ComputePID_1,ID[i],b);ht_U.Add(PID_value,PID[i]);} -> Compute_D{D[i]=call(ComputeD_1,ht_U.GetValue(B_value),ht_U.GetValue(PID_value),A[i]);ht_U.Add(D_value,D[i]);} -> Skip;
             
User_Auth(i,j) =  GenerateN{var t=call(RAND,20,0,5);ht_U.Add(N1_value,t);}
              -> GenerateTS{ht_U.Add(TS_value,call(Timestamp));ht_U.Add(TS_c_value,call(RAND,20,0,22));}
             -> ComputeB{var t=call(ComputeB_2,ht_U.GetValue(D_value),ht_U.GetValue(C_value));ht_U.Add(B_value,t);}
             -> ComputeF{F[i]=call(ComputeF_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value));ht_U.Add(F_value,F[i]);}
             -> ComputePij{P[i][j]=call(ComputePij_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),SID[j],ht_U.GetValue(PID_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(Pij_value,P[i][j]);}
             -> ComputeCID{CID[i]=call(ComputeCID_1,ID[i],ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(CID_value,CID[i]);}
             -> ComputeG{G[i]=call(ComputeG_1,b,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(G_value,G[i]);}
             -> ComUS!F[i].P[i][j].CID[i].G[i].PID[i].ht_U.GetValue(TS_value).ht_U.GetValue(TS_c_value)
             -> ComUS?a1.a2{ht_U.Add(R_value,a1);ht_U.Add(V_value,a2);}
             -> ComputeXOR{var t=call(Compute_XOR_N2_N3,ht_U.GetValue(R_value),ID[i],ht_U.GetValue(N1_value),ht_U.GetValue(B_value));
                          ht_U.Add(XOR_N2_N3_value,t);}
             -> ComputeV{var t=call(ComputeV_1,ht_U.GetValue(XOR_N2_N3_value));if(t==V[i]){cs_check_V=true;}}
             -> ComputeSK{var t=call(ComputeSK_1,ht_U.GetValue(XOR_N2_N3_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                           ht_U.Add(SK_value,t);;User_SK=t;}
             -> Skip;
             
User_Auth_I(i,j) =  GenerateN{var t=call(RAND,20,0,5);ht_U.Add(N1_value,t);}
              -> GenerateTS{ht_U.Add(TS_value,call(Timestamp));ht_U.Add(TS_c_value,call(RAND,20,0,22));}
             -> ComputeB{var t=call(ComputeB_2,ht_U.GetValue(D_value),ht_U.GetValue(C_value));ht_U.Add(B_value,t);}
             -> ComputeF{F[i]=call(ComputeF_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value));ht_U.Add(F_value,F[i]);}
             -> ComputePij{P[i][j]=call(ComputePij_1,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),SID[j],ht_U.GetValue(PID_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(Pij_value,P[i][j]);}
             -> ComputeCID{CID[i]=call(ComputeCID_1,ID[i],ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(CID_value,CID[i]);}
             -> ComputeG{G[i]=call(ComputeG_1,b,ht_U.GetValue(B_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                                  ht_U.Add(G_value,G[i]);}
             -> FakeIU!F[i].P[i][j].CID[i].G[i].PID[i].ht_U.GetValue(TS_value).ht_U.GetValue(TS_c_value) 
             -> ComUS?a1.a2{ht_U.Add(R_value,a1);ht_U.Add(V_value,a2);} 
             -> ComputeXOR{var t=call(Compute_XOR_N2_N3,ht_U.GetValue(R_value),ID[i],ht_U.GetValue(N1_value),ht_U.GetValue(B_value));
                          ht_U.Add(XOR_N2_N3_value,t);}
             -> ComputeV{var t=call(ComputeV_1,ht_U.GetValue(XOR_N2_N3_value));if(t==V[i]){cs_check_V=true;}}
             -> ComputeSK{var t=call(ComputeSK_1,ht_U.GetValue(XOR_N2_N3_value),ht_U.GetValue(N1_value),ht_U.GetValue(TS_c_value));
                           ht_U.Add(SK_value,t);;User_SK=t;}
             -> Skip;   
                  
CS_Reg(i,j) =  Select{x=Master_Secret_Key;y=Secret_Number;ht_C.Add(x_value,x);ht_C.Add(y_value,y);} 
                -> ComSC?a1.a2{ht_C.Add(d_value,a2);}
                -> ComputePSID{PSID[j]=call(ComputePSID_1,SID[j],d);ht_C.Add(PSID_value,PSID[j]);}
                -> ComputeBS{BS[j]=call(ComputeBS_1,PSID[j],y);ht_C.Add(BS_value,BS[j]);} 
                -> ComSC!BS[j]
                -> ComUC?v1.v2.v3{ht_C.Add(ID_value,v1);ht_C.Add(b_value,v2);ht_C.Add(A_value,v3);} 
                -> ComputePID{PID[i]=call(ComputePID_1,ID[i],b);ht_C.Add(PID_value,PID[i]);}
                -> ComputeB{B[i]=call(ComputeB_1,PID[i],x);ht_C.Add(B_value,B[i]);}
                -> ComUC!B[i]
                -> Skip;        

CS_Auth(i,j) = ComSC?v1.v2.v3.v4.v5.v6.v7.v8.v9.v10.v11.v12
              {ht_C.Add(F_value,v1);ht_C.Add(Pij_value,v2);ht_C.Add(CID_value,v3);ht_C.Add(G_value,v4);
              ht_C.Add(PID_value,v5);ht_C.Add(TS_value,v6);ht_C.Add(J_value,v7);ht_C.Add(K_value,v8);
              ht_C.Add(L_value,v9);ht_C.Add(M_value,v10);ht_C.Add(PSID_value,v11);ht_C.Add(TS_c_value,v12);}
              -> CheckDelay{var t=call(EndSession, ht_C.GetValue(TS_value), call(Timestamp), delaym, delays);if(t==true){timeout=true;}}
              -> ComputeBS{var t=call(ComputeBS_1,ht_C.GetValue(PSID_value),y);ht_C.Add(BS_value,t);}
              -> ComputeN{var t=call(ComputeN_1,ht_C.GetValue(J_value),ht_C.GetValue(BS_value));ht_C.Add(N2_value,t);}
              -> ComputeK{var t=call(ComputeK_1,ht_C.GetValue(N2_value),ht_C.GetValue(BS_value),ht_C.GetValue(Pij_value),ht_C.GetValue(TS_c_value));
                          if(t==K[i]){cs_check_K=true;}}
              -> ComputeB{var t=call(ComputeB_1,PID[i],x);ht_C.Add(B_value,t);}
              -> ComputeN{var t=call(ComputeN_1,ht_C.GetValue(F_value),ht_C.GetValue(B_value));ht_C.Add(N1_value,t);}
              -> ComputeID{var t=call(ComputeID_1,ht_C.GetValue(CID_value),ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                           ht_C.Add(ID_value,t);}
              -> ComputeSID{var t=call(ComputeSID_1,ht_C.GetValue(L_value),ht_C.GetValue(BS_value),ht_C.GetValue(N2_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(SID_value,t);}
              -> ComputePij{var t=call(ComputePij_1,ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(SID_value),ht_C.GetValue(PID_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(Pij_value,t);if(t==P[i][j]){cs_check_Pij=true;}}
              -> Compute_b{var t=call(Compute_b_1,ht_C.GetValue(G_value),ht_C.GetValue(B_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(b_value,t);}  
              -> Compute_d{var t=call(Compute_d_1,ht_C.GetValue(M_value),ht_C.GetValue(BS_value),ht_C.GetValue(N1_value),ht_C.GetValue(TS_c_value));
                            ht_C.Add(d_value,t);} 
              -> ComputePID{var t=call(ComputePID_1,ID[i],b);ht_C.Add(PID_value,t);if(t==PID[i]){cs_check_PID=true;}}     
              -> ComputePSID{var t=call(ComputePSID_1,SID[j],d);ht_C.Add(PSID_value,t);if(t==PSID[i]){cs_check_PSID=true;}}
              -> GenerateN{var t=call(RAND,20,0,6);ht_C.Add(N3_value,t);} 
              -> ComputeP{p[i]=call(ComputeP_1,ht_C.GetValue(N1_value),ht_C.GetValue(N3_value),ht_C.GetValue(SID_value),ht_C.GetValue(N2_value),ht_C.GetValue(BS_value));
                          ht_C.Add(P_value,p[i]);}
              -> ComputeQ1{Q[i]=call(ComputeQ_1,ht_C.GetValue(N1_value),ht_C.GetValue(N3_value));
                          ht_C.Add(Q_value,Q[i]);} 
              -> ComputeR{R[i]=call(ComputeR_1,ht_C.GetValue(N2_value),ht_C.GetValue(N3_value),ht_C.GetValue(ID_value),ht_C.GetValue(N1_value),ht_C.GetValue(B_value));
                          ht_C.Add(R_value,R[i]);} 
              -> ComputeV{V[i]=call(ComputeV_1,ht_C.GetValue(N2_value),ht_C.GetValue(N3_value));
                          ht_C.Add(V_value,V[i]);} 
              -> ComSC!p[i].Q[i].R[i].V[i]
              -> ComputeSK{var t=call(ComputeSK_3,ht_C.GetValue(N1_value),ht_C.GetValue(N2_value),ht_C.GetValue(N3_value),ht_C.GetValue(TS_c_value));
                           ht_C.Add(SK_value,t);CS_SK=t;}
              -> Skip;

Server_Reg(j) = Select_d{d=call(RAND,20,0,5);ht_S.Add(d_value,d);} 
                -> ComputePSID{PSID[j]=call(ComputePSID_1,SID[j],d);ht_S.Add(PSID_value,PSID[j]);} -> ComSC!SID[j].d -> ComSC?b1{ht_S.Add(BS_value,b1);} -> Skip;

Server_Auth(i) = GenerateN{var t=call(RAND,20,0,7);ht_S.Add(N2_value,t);} 
              -> ComUS?v1.v2.v3.v4.v5.v6.v7{ht_S.Add(F_value,v1);ht_S.Add(Pij_value,v2);ht_S.Add(CID_value,v3);
                                      ht_S.Add(G_value,v4);ht_S.Add(PID_value,v5);ht_S.Add(TS_value,v6);ht_S.Add(TS_c_value,v7);}                      
              -> CheckDelay{var t=call(EndSession, ht_S.GetValue(TS_value), call(Timestamp), delaym, delays);if(t==true){successrelayattack=true;timeout=true;}}                   
              -> ComputeJ{J[i]=call(ComputeJ_1,ht_S.GetValue(BS_value),ht_S.GetValue(N2_value));ht_S.Add(J_value,J[i]);}   
              -> ComputeK{K[i]=call(ComputeK_1,ht_S.GetValue(N2_value),ht_S.GetValue(BS_value),ht_S.GetValue(Pij_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(K_value,K[i]);}
              -> ComputeL{L[i]=call(ComputeL_1,ht_S.GetValue(SID_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(L_value,L[i]);}
              -> ComputeM{M[i]=call(ComputeM_1,ht_S.GetValue(d_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(M_value,M[i]);}
              -> ComSC!ht_S.GetValue(F_value).ht_S.GetValue(Pij_value).ht_S.GetValue(CID_value).
                        ht_S.GetValue(G_value).ht_S.GetValue(PID_value).ht_S.GetValue(TS_value).J[i].K[i].L[i].M[i].ht_S.GetValue(PSID_value).ht_S.GetValue(TS_c_value)
              -> ComSC?a1.a2.a3.a4{ht_S.Add(P_value,a1);ht_S.Add(Q_value,a2);ht_S.Add(R_value,a3);ht_S.Add(V_value,a4);} 
              -> ComputeXOR{var t=call(Compute_XOR_N1_N3,ht_S.GetValue(P_value),ht_S.GetValue(SID_value),ht_S.GetValue(N2_value),ht_S.GetValue(BS_value));
                           ht_S.Add(XOR_N1_N3_value,t);}
              -> ComputeQ2{var t=call(ComputeQ_1,ht_S.GetValue(XOR_N1_N3_value));if(t==Q[i]){cs_check_Q=true;}}
              -> ComUS!ht_S.GetValue(R_value).ht_S.GetValue(V_value)
              -> ComputeSK{var t=call(ComputeSK_2,ht_S.GetValue(XOR_N1_N3_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                           ht_S.Add(SK_value,t);Server_SK=t;}
              ->Skip; 

Server_Auth_I(i) = 
               GenerateN{var t=call(RAND,20,0,7);ht_S.Add(N2_value,t);} 
              -> FakeIS?v1.v2.v3.v4.v5.v6.v7{ht_S.Add(F_value,v1);ht_S.Add(Pij_value,v2);ht_S.Add(CID_value,v3);
                                      ht_S.Add(G_value,v4);ht_S.Add(PID_value,v5);ht_S.Add(TS_value,v6);ht_S.Add(TS_c_value,v7);}                        
              -> CheckDelay{var t1= ht_S.GetValue(TS_value); var t2= call(Timestamp);var t=call(EndSession, ht_S.GetValue(TS_value), t2, delaym, delays);if(t==true){timeout=true;}}
              -> if(timeout==false){Server_Auth_I_Sub(i)} else{Skip};
              
Server_Auth_I_Sub(i) = ComputeJ{J[i]=call(ComputeJ_1,ht_S.GetValue(BS_value),ht_S.GetValue(N2_value));ht_S.Add(J_value,J[i]);}   
              -> ComputeK{K[i]=call(ComputeK_1,ht_S.GetValue(N2_value),ht_S.GetValue(BS_value),ht_S.GetValue(Pij_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(K_value,K[i]);}
              -> ComputeL{L[i]=call(ComputeL_1,ht_S.GetValue(SID_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(L_value,L[i]);}
              -> ComputeM{M[i]=call(ComputeM_1,ht_S.GetValue(d_value),ht_S.GetValue(BS_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                          ht_S.Add(M_value,M[i]);}
              -> ComSC!ht_S.GetValue(F_value).ht_S.GetValue(Pij_value).ht_S.GetValue(CID_value).
                        ht_S.GetValue(G_value).ht_S.GetValue(PID_value).ht_S.GetValue(TS_value).J[i].K[i].L[i].M[i].ht_S.GetValue(PSID_value).ht_S.GetValue(TS_c_value)
              -> ComSC?a1.a2.a3.a4{ht_S.Add(P_value,a1);ht_S.Add(Q_value,a2);ht_S.Add(R_value,a3);ht_S.Add(V_value,a4);} 
              -> ComputeXOR{var t=call(Compute_XOR_N1_N3,ht_S.GetValue(P_value),ht_S.GetValue(SID_value),ht_S.GetValue(N2_value),ht_S.GetValue(BS_value));
                           ht_S.Add(XOR_N1_N3_value,t);}
              -> ComputeQ2{var t=call(ComputeQ_1,ht_S.GetValue(XOR_N1_N3_value));if(t==Q[i]){cs_check_Q=true;}}
              -> FakeIS!ht_S.GetValue(R_value).ht_S.GetValue(V_value)
              -> ComputeSK{var t=call(ComputeSK_2,ht_S.GetValue(XOR_N1_N3_value),ht_S.GetValue(N2_value),ht_S.GetValue(TS_c_value));
                           ht_S.Add(SK_value,t);Server_SK=t;}
              ->Skip; 

User(i,j) = User_Reg(i);User_Auth(i,j);
Server(i) = Server_Reg(i);Server_Auth(i);
CS(i,j) = CS_Reg(i,j);CS_Auth(i,j);
Protocol_X() = Initial(UserID,ServerID);(User(UserID,ServerID)||Server(UserID)||CS(UserID,ServerID));Protocol_X();
Intruder() = FakeIU?t1.t2.t3.t4.t5.t6.t7 -> FakeIS!t1.t2.t3.t4.t5.TS_fake.TS_c_fake -> FakeIS?v1.v2 -> CheckReplayAttack{successrelayattack=true;}-> Skip;           
User_I(i,j) = User_Reg(i);User_Auth_I(i,j);
Server_I(i) = Server_Reg(i);Server_Auth_I(i);
Protocol_X_I() = Initial(UserID,ServerID);(User_I(UserID,ServerID)||Server_I(UserID)||CS(UserID,ServerID)||Intruder());Protocol_X_I();

#assert Protocol_X() deadlockfree;
#assert Protocol_X() |= <> S_U_Legitimacy_X_For_CS;
#assert Protocol_X() |= <> CS_U_Legitimacy_X_For_S;
#assert Protocol_X() |= <> S_CS_Legitimacy_X_For_U;
#assert Protocol_X() |= <> SK_Consistency;
#assert Protocol_X() |=[]!TimeOut;

#assert Protocol_X_I() reaches SuccessRelayAttack;
 
